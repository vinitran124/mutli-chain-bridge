// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "bridge/app/content/bob"
	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
)

type TokenMod interface {
	Apply(*TokenTemplate)
}

type TokenModFunc func(*TokenTemplate)

func (f TokenModFunc) Apply(n *TokenTemplate) {
	f(n)
}

type TokenModSlice []TokenMod

func (mods TokenModSlice) Apply(n *TokenTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TokenTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TokenTemplate struct {
	ID        func() uuid.UUID
	Address   func() string
	ChainID   func() string
	Name      func() string
	CreatedAt func() time.Time
	UpdatedAt func() time.Time

	f *factory
}

// Apply mods to the TokenTemplate
func (o *TokenTemplate) Apply(mods ...TokenMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Token
// this does nothing with the relationship templates
func (o TokenTemplate) toModel() *models.Token {
	m := &models.Token{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Address != nil {
		m.Address = o.Address()
	}
	if o.ChainID != nil {
		m.ChainID = o.ChainID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.TokenSlice
// this does nothing with the relationship templates
func (o TokenTemplate) toModels(number int) models.TokenSlice {
	m := make(models.TokenSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Token
// according to the relationships in the template. Nothing is inserted into the db
func (t TokenTemplate) setModelRels(o *models.Token) {}

// BuildSetter returns an *models.TokenSetter
// this does nothing with the relationship templates
func (o TokenTemplate) BuildSetter() *models.TokenSetter {
	m := &models.TokenSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Address != nil {
		m.Address = omit.From(o.Address())
	}
	if o.ChainID != nil {
		m.ChainID = omit.From(o.ChainID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.TokenSetter
// this does nothing with the relationship templates
func (o TokenTemplate) BuildManySetter(number int) []*models.TokenSetter {
	m := make([]*models.TokenSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Token
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TokenTemplate.Create
func (o TokenTemplate) Build() *models.Token {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TokenSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TokenTemplate.CreateMany
func (o TokenTemplate) BuildMany(number int) models.TokenSlice {
	m := make(models.TokenSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableToken(m *models.TokenSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random[uuid.UUID](nil))
	}
	if m.Address.IsUnset() {
		m.Address = omit.From(random[string](nil))
	}
	if m.ChainID.IsUnset() {
		m.ChainID = omit.From(random[string](nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
	if m.CreatedAt.IsUnset() {
		m.CreatedAt = omit.From(random[time.Time](nil))
	}
	if m.UpdatedAt.IsUnset() {
		m.UpdatedAt = omit.From(random[time.Time](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Token
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TokenTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Token) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a token and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TokenTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Token, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a token and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TokenTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Token, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableToken(opt)

	m, err := models.TokensTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = tokenCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple tokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TokenTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TokenSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple tokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TokenTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TokenSlice, error) {
	var err error
	m := make(models.TokenSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Token has methods that act as mods for the TokenTemplate
var TokenMods tokenMods

type tokenMods struct{}

func (m tokenMods) RandomizeAllColumns(f *faker.Faker) TokenMod {
	return TokenModSlice{
		TokenMods.RandomID(f),
		TokenMods.RandomAddress(f),
		TokenMods.RandomChainID(f),
		TokenMods.RandomName(f),
		TokenMods.RandomCreatedAt(f),
		TokenMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m tokenMods) ID(val uuid.UUID) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m tokenMods) IDFunc(f func() uuid.UUID) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetID() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomID(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

func (m tokenMods) ensureID(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) Address(val string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Address = func() string { return val }
	})
}

// Set the Column from the function
func (m tokenMods) AddressFunc(f func() string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Address = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetAddress() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Address = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomAddress(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Address = func() string {
			return random[string](f)
		}
	})
}

func (m tokenMods) ensureAddress(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		if o.Address != nil {
			return
		}

		o.Address = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) ChainID(val string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ChainID = func() string { return val }
	})
}

// Set the Column from the function
func (m tokenMods) ChainIDFunc(f func() string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ChainID = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetChainID() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ChainID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomChainID(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.ChainID = func() string {
			return random[string](f)
		}
	})
}

func (m tokenMods) ensureChainID(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		if o.ChainID != nil {
			return
		}

		o.ChainID = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) Name(val string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m tokenMods) NameFunc(f func() string) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetName() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomName(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m tokenMods) ensureName(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) CreatedAt(val time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m tokenMods) CreatedAtFunc(f func() time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetCreatedAt() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomCreatedAt(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m tokenMods) ensureCreatedAt(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m tokenMods) UpdatedAt(val time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m tokenMods) UpdatedAtFunc(f func() time.Time) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m tokenMods) UnsetUpdatedAt() TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tokenMods) RandomUpdatedAt(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m tokenMods) ensureUpdatedAt(f *faker.Faker) TokenMod {
	return TokenModFunc(func(o *TokenTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}
