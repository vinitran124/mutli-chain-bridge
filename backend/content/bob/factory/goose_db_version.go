// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "bridge/app/content/bob"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
)

type GooseDBVersionMod interface {
	Apply(*GooseDBVersionTemplate)
}

type GooseDBVersionModFunc func(*GooseDBVersionTemplate)

func (f GooseDBVersionModFunc) Apply(n *GooseDBVersionTemplate) {
	f(n)
}

type GooseDBVersionModSlice []GooseDBVersionMod

func (mods GooseDBVersionModSlice) Apply(n *GooseDBVersionTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// GooseDBVersionTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type GooseDBVersionTemplate struct {
	ID        func() int
	VersionID func() int64
	IsApplied func() bool
	Tstamp    func() null.Val[time.Time]

	f *factory
}

// Apply mods to the GooseDBVersionTemplate
func (o *GooseDBVersionTemplate) Apply(mods ...GooseDBVersionMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.GooseDBVersion
// this does nothing with the relationship templates
func (o GooseDBVersionTemplate) toModel() *models.GooseDBVersion {
	m := &models.GooseDBVersion{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.VersionID != nil {
		m.VersionID = o.VersionID()
	}
	if o.IsApplied != nil {
		m.IsApplied = o.IsApplied()
	}
	if o.Tstamp != nil {
		m.Tstamp = o.Tstamp()
	}

	return m
}

// toModels returns an models.GooseDBVersionSlice
// this does nothing with the relationship templates
func (o GooseDBVersionTemplate) toModels(number int) models.GooseDBVersionSlice {
	m := make(models.GooseDBVersionSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.GooseDBVersion
// according to the relationships in the template. Nothing is inserted into the db
func (t GooseDBVersionTemplate) setModelRels(o *models.GooseDBVersion) {}

// BuildSetter returns an *models.GooseDBVersionSetter
// this does nothing with the relationship templates
func (o GooseDBVersionTemplate) BuildSetter() *models.GooseDBVersionSetter {
	m := &models.GooseDBVersionSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.VersionID != nil {
		m.VersionID = omit.From(o.VersionID())
	}
	if o.IsApplied != nil {
		m.IsApplied = omit.From(o.IsApplied())
	}
	if o.Tstamp != nil {
		m.Tstamp = omitnull.FromNull(o.Tstamp())
	}

	return m
}

// BuildManySetter returns an []*models.GooseDBVersionSetter
// this does nothing with the relationship templates
func (o GooseDBVersionTemplate) BuildManySetter(number int) []*models.GooseDBVersionSetter {
	m := make([]*models.GooseDBVersionSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.GooseDBVersion
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use GooseDBVersionTemplate.Create
func (o GooseDBVersionTemplate) Build() *models.GooseDBVersion {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.GooseDBVersionSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use GooseDBVersionTemplate.CreateMany
func (o GooseDBVersionTemplate) BuildMany(number int) models.GooseDBVersionSlice {
	m := make(models.GooseDBVersionSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableGooseDBVersion(m *models.GooseDBVersionSetter) {
	if m.VersionID.IsUnset() {
		m.VersionID = omit.From(random[int64](nil))
	}
	if m.IsApplied.IsUnset() {
		m.IsApplied = omit.From(random[bool](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.GooseDBVersion
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *GooseDBVersionTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.GooseDBVersion) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a gooseDBVersion and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *GooseDBVersionTemplate) Create(ctx context.Context, exec bob.Executor) (*models.GooseDBVersion, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a gooseDBVersion and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *GooseDBVersionTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.GooseDBVersion, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableGooseDBVersion(opt)

	m, err := models.GooseDBVersionsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = gooseDBVersionCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple gooseDBVersions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o GooseDBVersionTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.GooseDBVersionSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple gooseDBVersions and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o GooseDBVersionTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.GooseDBVersionSlice, error) {
	var err error
	m := make(models.GooseDBVersionSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// GooseDBVersion has methods that act as mods for the GooseDBVersionTemplate
var GooseDBVersionMods gooseDBVersionMods

type gooseDBVersionMods struct{}

func (m gooseDBVersionMods) RandomizeAllColumns(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModSlice{
		GooseDBVersionMods.RandomID(f),
		GooseDBVersionMods.RandomVersionID(f),
		GooseDBVersionMods.RandomIsApplied(f),
		GooseDBVersionMods.RandomTstamp(f),
	}
}

// Set the model columns to this value
func (m gooseDBVersionMods) ID(val int) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.ID = func() int { return val }
	})
}

// Set the Column from the function
func (m gooseDBVersionMods) IDFunc(f func() int) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m gooseDBVersionMods) UnsetID() GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m gooseDBVersionMods) RandomID(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.ID = func() int {
			return random[int](f)
		}
	})
}

func (m gooseDBVersionMods) ensureID(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int {
			return random[int](f)
		}
	})
}

// Set the model columns to this value
func (m gooseDBVersionMods) VersionID(val int64) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.VersionID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m gooseDBVersionMods) VersionIDFunc(f func() int64) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.VersionID = f
	})
}

// Clear any values for the column
func (m gooseDBVersionMods) UnsetVersionID() GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.VersionID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m gooseDBVersionMods) RandomVersionID(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.VersionID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m gooseDBVersionMods) ensureVersionID(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		if o.VersionID != nil {
			return
		}

		o.VersionID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m gooseDBVersionMods) IsApplied(val bool) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.IsApplied = func() bool { return val }
	})
}

// Set the Column from the function
func (m gooseDBVersionMods) IsAppliedFunc(f func() bool) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.IsApplied = f
	})
}

// Clear any values for the column
func (m gooseDBVersionMods) UnsetIsApplied() GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.IsApplied = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m gooseDBVersionMods) RandomIsApplied(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.IsApplied = func() bool {
			return random[bool](f)
		}
	})
}

func (m gooseDBVersionMods) ensureIsApplied(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		if o.IsApplied != nil {
			return
		}

		o.IsApplied = func() bool {
			return random[bool](f)
		}
	})
}

// Set the model columns to this value
func (m gooseDBVersionMods) Tstamp(val null.Val[time.Time]) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.Tstamp = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m gooseDBVersionMods) TstampFunc(f func() null.Val[time.Time]) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.Tstamp = f
	})
}

// Clear any values for the column
func (m gooseDBVersionMods) UnsetTstamp() GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.Tstamp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m gooseDBVersionMods) RandomTstamp(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		o.Tstamp = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

func (m gooseDBVersionMods) ensureTstamp(f *faker.Faker) GooseDBVersionMod {
	return GooseDBVersionModFunc(func(o *GooseDBVersionTemplate) {
		if o.Tstamp != nil {
			return
		}

		o.Tstamp = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}
