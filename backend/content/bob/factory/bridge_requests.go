// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "bridge/app/content/bob"
	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
)

type BridgeRequestMod interface {
	Apply(*BridgeRequestTemplate)
}

type BridgeRequestModFunc func(*BridgeRequestTemplate)

func (f BridgeRequestModFunc) Apply(n *BridgeRequestTemplate) {
	f(n)
}

type BridgeRequestModSlice []BridgeRequestMod

func (mods BridgeRequestModSlice) Apply(n *BridgeRequestTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// BridgeRequestTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type BridgeRequestTemplate struct {
	ID          func() uuid.UUID
	UserAddress func() string
	InputChain  func() string
	OutputChain func() string
	RawAmount   func() string
	IsComplete  func() bool
	Token       func() string
	CreatedAt   func() time.Time
	UpdatedAt   func() time.Time

	f *factory
}

// Apply mods to the BridgeRequestTemplate
func (o *BridgeRequestTemplate) Apply(mods ...BridgeRequestMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.BridgeRequest
// this does nothing with the relationship templates
func (o BridgeRequestTemplate) toModel() *models.BridgeRequest {
	m := &models.BridgeRequest{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserAddress != nil {
		m.UserAddress = o.UserAddress()
	}
	if o.InputChain != nil {
		m.InputChain = o.InputChain()
	}
	if o.OutputChain != nil {
		m.OutputChain = o.OutputChain()
	}
	if o.RawAmount != nil {
		m.RawAmount = o.RawAmount()
	}
	if o.IsComplete != nil {
		m.IsComplete = o.IsComplete()
	}
	if o.Token != nil {
		m.Token = o.Token()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.BridgeRequestSlice
// this does nothing with the relationship templates
func (o BridgeRequestTemplate) toModels(number int) models.BridgeRequestSlice {
	m := make(models.BridgeRequestSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.BridgeRequest
// according to the relationships in the template. Nothing is inserted into the db
func (t BridgeRequestTemplate) setModelRels(o *models.BridgeRequest) {}

// BuildSetter returns an *models.BridgeRequestSetter
// this does nothing with the relationship templates
func (o BridgeRequestTemplate) BuildSetter() *models.BridgeRequestSetter {
	m := &models.BridgeRequestSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserAddress != nil {
		m.UserAddress = omit.From(o.UserAddress())
	}
	if o.InputChain != nil {
		m.InputChain = omit.From(o.InputChain())
	}
	if o.OutputChain != nil {
		m.OutputChain = omit.From(o.OutputChain())
	}
	if o.RawAmount != nil {
		m.RawAmount = omit.From(o.RawAmount())
	}
	if o.IsComplete != nil {
		m.IsComplete = omit.From(o.IsComplete())
	}
	if o.Token != nil {
		m.Token = omit.From(o.Token())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.BridgeRequestSetter
// this does nothing with the relationship templates
func (o BridgeRequestTemplate) BuildManySetter(number int) []*models.BridgeRequestSetter {
	m := make([]*models.BridgeRequestSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.BridgeRequest
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use BridgeRequestTemplate.Create
func (o BridgeRequestTemplate) Build() *models.BridgeRequest {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.BridgeRequestSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use BridgeRequestTemplate.CreateMany
func (o BridgeRequestTemplate) BuildMany(number int) models.BridgeRequestSlice {
	m := make(models.BridgeRequestSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableBridgeRequest(m *models.BridgeRequestSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random[uuid.UUID](nil))
	}
	if m.UserAddress.IsUnset() {
		m.UserAddress = omit.From(random[string](nil))
	}
	if m.InputChain.IsUnset() {
		m.InputChain = omit.From(random[string](nil))
	}
	if m.OutputChain.IsUnset() {
		m.OutputChain = omit.From(random[string](nil))
	}
	if m.RawAmount.IsUnset() {
		m.RawAmount = omit.From(random[string](nil))
	}
	if m.Token.IsUnset() {
		m.Token = omit.From(random[string](nil))
	}
	if m.CreatedAt.IsUnset() {
		m.CreatedAt = omit.From(random[time.Time](nil))
	}
	if m.UpdatedAt.IsUnset() {
		m.UpdatedAt = omit.From(random[time.Time](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.BridgeRequest
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *BridgeRequestTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.BridgeRequest) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a bridgeRequest and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *BridgeRequestTemplate) Create(ctx context.Context, exec bob.Executor) (*models.BridgeRequest, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a bridgeRequest and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *BridgeRequestTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.BridgeRequest, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableBridgeRequest(opt)

	m, err := models.BridgeRequestsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = bridgeRequestCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple bridgeRequests and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o BridgeRequestTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.BridgeRequestSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple bridgeRequests and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o BridgeRequestTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.BridgeRequestSlice, error) {
	var err error
	m := make(models.BridgeRequestSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// BridgeRequest has methods that act as mods for the BridgeRequestTemplate
var BridgeRequestMods bridgeRequestMods

type bridgeRequestMods struct{}

func (m bridgeRequestMods) RandomizeAllColumns(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModSlice{
		BridgeRequestMods.RandomID(f),
		BridgeRequestMods.RandomUserAddress(f),
		BridgeRequestMods.RandomInputChain(f),
		BridgeRequestMods.RandomOutputChain(f),
		BridgeRequestMods.RandomRawAmount(f),
		BridgeRequestMods.RandomIsComplete(f),
		BridgeRequestMods.RandomToken(f),
		BridgeRequestMods.RandomCreatedAt(f),
		BridgeRequestMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m bridgeRequestMods) ID(val uuid.UUID) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) IDFunc(f func() uuid.UUID) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetID() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomID(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

func (m bridgeRequestMods) ensureID(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

// Set the model columns to this value
func (m bridgeRequestMods) UserAddress(val string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.UserAddress = func() string { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) UserAddressFunc(f func() string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.UserAddress = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetUserAddress() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.UserAddress = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomUserAddress(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.UserAddress = func() string {
			return random[string](f)
		}
	})
}

func (m bridgeRequestMods) ensureUserAddress(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.UserAddress != nil {
			return
		}

		o.UserAddress = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m bridgeRequestMods) InputChain(val string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.InputChain = func() string { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) InputChainFunc(f func() string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.InputChain = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetInputChain() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.InputChain = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomInputChain(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.InputChain = func() string {
			return random[string](f)
		}
	})
}

func (m bridgeRequestMods) ensureInputChain(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.InputChain != nil {
			return
		}

		o.InputChain = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m bridgeRequestMods) OutputChain(val string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.OutputChain = func() string { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) OutputChainFunc(f func() string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.OutputChain = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetOutputChain() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.OutputChain = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomOutputChain(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.OutputChain = func() string {
			return random[string](f)
		}
	})
}

func (m bridgeRequestMods) ensureOutputChain(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.OutputChain != nil {
			return
		}

		o.OutputChain = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m bridgeRequestMods) RawAmount(val string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.RawAmount = func() string { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) RawAmountFunc(f func() string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.RawAmount = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetRawAmount() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.RawAmount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomRawAmount(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.RawAmount = func() string {
			return random[string](f)
		}
	})
}

func (m bridgeRequestMods) ensureRawAmount(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.RawAmount != nil {
			return
		}

		o.RawAmount = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m bridgeRequestMods) IsComplete(val bool) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.IsComplete = func() bool { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) IsCompleteFunc(f func() bool) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.IsComplete = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetIsComplete() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.IsComplete = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomIsComplete(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.IsComplete = func() bool {
			return random[bool](f)
		}
	})
}

func (m bridgeRequestMods) ensureIsComplete(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.IsComplete != nil {
			return
		}

		o.IsComplete = func() bool {
			return random[bool](f)
		}
	})
}

// Set the model columns to this value
func (m bridgeRequestMods) Token(val string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.Token = func() string { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) TokenFunc(f func() string) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.Token = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetToken() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.Token = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomToken(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.Token = func() string {
			return random[string](f)
		}
	})
}

func (m bridgeRequestMods) ensureToken(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.Token != nil {
			return
		}

		o.Token = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m bridgeRequestMods) CreatedAt(val time.Time) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) CreatedAtFunc(f func() time.Time) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetCreatedAt() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomCreatedAt(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m bridgeRequestMods) ensureCreatedAt(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m bridgeRequestMods) UpdatedAt(val time.Time) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m bridgeRequestMods) UpdatedAtFunc(f func() time.Time) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m bridgeRequestMods) UnsetUpdatedAt() BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m bridgeRequestMods) RandomUpdatedAt(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m bridgeRequestMods) ensureUpdatedAt(f *faker.Faker) BridgeRequestMod {
	return BridgeRequestModFunc(func(o *BridgeRequestTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}
