// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package bob

import (
	"context"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
)

// Transaction is an object representing the database table.
type Transaction struct {
	ID         uuid.UUID `db:"id,pk" `
	User       string    `db:"user" `
	Token      string    `db:"token" `
	RawAmount  string    `db:"raw_amount" `
	ChainID    string    `db:"chain_id" `
	IsComplete bool      `db:"is_complete" `
	CreatedAt  time.Time `db:"created_at" `
	UpdatedAt  time.Time `db:"updated_at" `
	Hash       string    `db:"hash" `
}

// TransactionSlice is an alias for a slice of pointers to Transaction.
// This should almost always be used instead of []*Transaction.
type TransactionSlice []*Transaction

// TransactionsTable contains methods to work with the transactions table
var TransactionsTable = psql.NewTablex[*Transaction, TransactionSlice, *TransactionSetter]("", "transactions")

// TransactionsQuery is a query on the transactions table
type TransactionsQuery = *psql.TableQuery[*Transaction, TransactionSlice, *TransactionSetter]

// TransactionsStmt is a prepared statment on transactions
type TransactionsStmt = bob.QueryStmt[*Transaction, TransactionSlice]

// TransactionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TransactionSetter struct {
	ID         omit.Val[uuid.UUID] `db:"id,pk"`
	User       omit.Val[string]    `db:"user"`
	Token      omit.Val[string]    `db:"token"`
	RawAmount  omit.Val[string]    `db:"raw_amount"`
	ChainID    omit.Val[string]    `db:"chain_id"`
	IsComplete omit.Val[bool]      `db:"is_complete"`
	CreatedAt  omit.Val[time.Time] `db:"created_at"`
	UpdatedAt  omit.Val[time.Time] `db:"updated_at"`
	Hash       omit.Val[string]    `db:"hash"`
}

type transactionColumnNames struct {
	ID         string
	User       string
	Token      string
	RawAmount  string
	ChainID    string
	IsComplete string
	CreatedAt  string
	UpdatedAt  string
	Hash       string
}

var TransactionColumns = struct {
	ID         psql.Expression
	User       psql.Expression
	Token      psql.Expression
	RawAmount  psql.Expression
	ChainID    psql.Expression
	IsComplete psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
	Hash       psql.Expression
}{
	ID:         psql.Quote("transactions", "id"),
	User:       psql.Quote("transactions", "user"),
	Token:      psql.Quote("transactions", "token"),
	RawAmount:  psql.Quote("transactions", "raw_amount"),
	ChainID:    psql.Quote("transactions", "chain_id"),
	IsComplete: psql.Quote("transactions", "is_complete"),
	CreatedAt:  psql.Quote("transactions", "created_at"),
	UpdatedAt:  psql.Quote("transactions", "updated_at"),
	Hash:       psql.Quote("transactions", "hash"),
}

type transactionWhere[Q psql.Filterable] struct {
	ID         psql.WhereMod[Q, uuid.UUID]
	User       psql.WhereMod[Q, string]
	Token      psql.WhereMod[Q, string]
	RawAmount  psql.WhereMod[Q, string]
	ChainID    psql.WhereMod[Q, string]
	IsComplete psql.WhereMod[Q, bool]
	CreatedAt  psql.WhereMod[Q, time.Time]
	UpdatedAt  psql.WhereMod[Q, time.Time]
	Hash       psql.WhereMod[Q, string]
}

func TransactionWhere[Q psql.Filterable]() transactionWhere[Q] {
	return transactionWhere[Q]{
		ID:         psql.Where[Q, uuid.UUID](TransactionColumns.ID),
		User:       psql.Where[Q, string](TransactionColumns.User),
		Token:      psql.Where[Q, string](TransactionColumns.Token),
		RawAmount:  psql.Where[Q, string](TransactionColumns.RawAmount),
		ChainID:    psql.Where[Q, string](TransactionColumns.ChainID),
		IsComplete: psql.Where[Q, bool](TransactionColumns.IsComplete),
		CreatedAt:  psql.Where[Q, time.Time](TransactionColumns.CreatedAt),
		UpdatedAt:  psql.Where[Q, time.Time](TransactionColumns.UpdatedAt),
		Hash:       psql.Where[Q, string](TransactionColumns.Hash),
	}
}

// Transactions begins a query on transactions
func Transactions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TransactionsQuery {
	return TransactionsTable.Query(ctx, exec, mods...)
}

// FindTransaction retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTransaction(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Transaction, error) {
	if len(cols) == 0 {
		return TransactionsTable.Query(
			ctx, exec,
			SelectWhere.Transactions.ID.EQ(IDPK),
		).One()
	}

	return TransactionsTable.Query(
		ctx, exec,
		SelectWhere.Transactions.ID.EQ(IDPK),
		sm.Columns(TransactionsTable.Columns().Only(cols...)),
	).One()
}

// TransactionExists checks the presence of a single record by primary key
func TransactionExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return TransactionsTable.Query(
		ctx, exec,
		SelectWhere.Transactions.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the Transaction
func (o *Transaction) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := TransactionsTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single Transaction record with an executor
func (o *Transaction) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return TransactionsTable.Delete(ctx, exec, o)
}

// Reload refreshes the Transaction using the executor
func (o *Transaction) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TransactionsTable.Query(
		ctx, exec,
		SelectWhere.Transactions.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o TransactionSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return TransactionsTable.DeleteMany(ctx, exec, o...)
}

func (o TransactionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TransactionSetter) (int64, error) {
	rowsAff, err := TransactionsTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o TransactionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uuid.UUID, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Transactions.ID.In(IDPK...),
	)

	o2, err := Transactions(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
