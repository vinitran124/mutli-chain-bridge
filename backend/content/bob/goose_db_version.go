// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package bob

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
)

// GooseDBVersion is an object representing the database table.
type GooseDBVersion struct {
	ID        int                 `db:"id,pk" `
	VersionID int64               `db:"version_id" `
	IsApplied bool                `db:"is_applied" `
	Tstamp    null.Val[time.Time] `db:"tstamp" `
}

// GooseDBVersionSlice is an alias for a slice of pointers to GooseDBVersion.
// This should almost always be used instead of []*GooseDBVersion.
type GooseDBVersionSlice []*GooseDBVersion

// GooseDBVersionsTable contains methods to work with the goose_db_version table
var GooseDBVersionsTable = psql.NewTablex[*GooseDBVersion, GooseDBVersionSlice, *GooseDBVersionSetter]("", "goose_db_version")

// GooseDBVersionsQuery is a query on the goose_db_version table
type GooseDBVersionsQuery = *psql.TableQuery[*GooseDBVersion, GooseDBVersionSlice, *GooseDBVersionSetter]

// GooseDBVersionsStmt is a prepared statment on goose_db_version
type GooseDBVersionsStmt = bob.QueryStmt[*GooseDBVersion, GooseDBVersionSlice]

// GooseDBVersionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type GooseDBVersionSetter struct {
	ID        omit.Val[int]           `db:"id,pk"`
	VersionID omit.Val[int64]         `db:"version_id"`
	IsApplied omit.Val[bool]          `db:"is_applied"`
	Tstamp    omitnull.Val[time.Time] `db:"tstamp"`
}

type gooseDBVersionColumnNames struct {
	ID        string
	VersionID string
	IsApplied string
	Tstamp    string
}

var GooseDBVersionColumns = struct {
	ID        psql.Expression
	VersionID psql.Expression
	IsApplied psql.Expression
	Tstamp    psql.Expression
}{
	ID:        psql.Quote("goose_db_version", "id"),
	VersionID: psql.Quote("goose_db_version", "version_id"),
	IsApplied: psql.Quote("goose_db_version", "is_applied"),
	Tstamp:    psql.Quote("goose_db_version", "tstamp"),
}

type gooseDBVersionWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, int]
	VersionID psql.WhereMod[Q, int64]
	IsApplied psql.WhereMod[Q, bool]
	Tstamp    psql.WhereNullMod[Q, time.Time]
}

func GooseDBVersionWhere[Q psql.Filterable]() gooseDBVersionWhere[Q] {
	return gooseDBVersionWhere[Q]{
		ID:        psql.Where[Q, int](GooseDBVersionColumns.ID),
		VersionID: psql.Where[Q, int64](GooseDBVersionColumns.VersionID),
		IsApplied: psql.Where[Q, bool](GooseDBVersionColumns.IsApplied),
		Tstamp:    psql.WhereNull[Q, time.Time](GooseDBVersionColumns.Tstamp),
	}
}

// GooseDBVersions begins a query on goose_db_version
func GooseDBVersions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) GooseDBVersionsQuery {
	return GooseDBVersionsTable.Query(ctx, exec, mods...)
}

// FindGooseDBVersion retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindGooseDBVersion(ctx context.Context, exec bob.Executor, IDPK int, cols ...string) (*GooseDBVersion, error) {
	if len(cols) == 0 {
		return GooseDBVersionsTable.Query(
			ctx, exec,
			SelectWhere.GooseDBVersions.ID.EQ(IDPK),
		).One()
	}

	return GooseDBVersionsTable.Query(
		ctx, exec,
		SelectWhere.GooseDBVersions.ID.EQ(IDPK),
		sm.Columns(GooseDBVersionsTable.Columns().Only(cols...)),
	).One()
}

// GooseDBVersionExists checks the presence of a single record by primary key
func GooseDBVersionExists(ctx context.Context, exec bob.Executor, IDPK int) (bool, error) {
	return GooseDBVersionsTable.Query(
		ctx, exec,
		SelectWhere.GooseDBVersions.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the GooseDBVersion
func (o *GooseDBVersion) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := GooseDBVersionsTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single GooseDBVersion record with an executor
func (o *GooseDBVersion) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return GooseDBVersionsTable.Delete(ctx, exec, o)
}

// Reload refreshes the GooseDBVersion using the executor
func (o *GooseDBVersion) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := GooseDBVersionsTable.Query(
		ctx, exec,
		SelectWhere.GooseDBVersions.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o GooseDBVersionSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return GooseDBVersionsTable.DeleteMany(ctx, exec, o...)
}

func (o GooseDBVersionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals GooseDBVersionSetter) (int64, error) {
	rowsAff, err := GooseDBVersionsTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o GooseDBVersionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.GooseDBVersions.ID.In(IDPK...),
	)

	o2, err := GooseDBVersions(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
