// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package bob

import (
	"context"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
)

// Token is an object representing the database table.
type Token struct {
	ID        uuid.UUID `db:"id,pk" `
	Address   string    `db:"address" `
	ChainID   string    `db:"chain_id" `
	Name      string    `db:"name" `
	CreatedAt time.Time `db:"created_at" `
	UpdatedAt time.Time `db:"updated_at" `
}

// TokenSlice is an alias for a slice of pointers to Token.
// This should almost always be used instead of []*Token.
type TokenSlice []*Token

// TokensTable contains methods to work with the tokens table
var TokensTable = psql.NewTablex[*Token, TokenSlice, *TokenSetter]("", "tokens")

// TokensQuery is a query on the tokens table
type TokensQuery = *psql.TableQuery[*Token, TokenSlice, *TokenSetter]

// TokensStmt is a prepared statment on tokens
type TokensStmt = bob.QueryStmt[*Token, TokenSlice]

// TokenSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TokenSetter struct {
	ID        omit.Val[uuid.UUID] `db:"id,pk"`
	Address   omit.Val[string]    `db:"address"`
	ChainID   omit.Val[string]    `db:"chain_id"`
	Name      omit.Val[string]    `db:"name"`
	CreatedAt omit.Val[time.Time] `db:"created_at"`
	UpdatedAt omit.Val[time.Time] `db:"updated_at"`
}

type tokenColumnNames struct {
	ID        string
	Address   string
	ChainID   string
	Name      string
	CreatedAt string
	UpdatedAt string
}

var TokenColumns = struct {
	ID        psql.Expression
	Address   psql.Expression
	ChainID   psql.Expression
	Name      psql.Expression
	CreatedAt psql.Expression
	UpdatedAt psql.Expression
}{
	ID:        psql.Quote("tokens", "id"),
	Address:   psql.Quote("tokens", "address"),
	ChainID:   psql.Quote("tokens", "chain_id"),
	Name:      psql.Quote("tokens", "name"),
	CreatedAt: psql.Quote("tokens", "created_at"),
	UpdatedAt: psql.Quote("tokens", "updated_at"),
}

type tokenWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, uuid.UUID]
	Address   psql.WhereMod[Q, string]
	ChainID   psql.WhereMod[Q, string]
	Name      psql.WhereMod[Q, string]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func TokenWhere[Q psql.Filterable]() tokenWhere[Q] {
	return tokenWhere[Q]{
		ID:        psql.Where[Q, uuid.UUID](TokenColumns.ID),
		Address:   psql.Where[Q, string](TokenColumns.Address),
		ChainID:   psql.Where[Q, string](TokenColumns.ChainID),
		Name:      psql.Where[Q, string](TokenColumns.Name),
		CreatedAt: psql.Where[Q, time.Time](TokenColumns.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](TokenColumns.UpdatedAt),
	}
}

// Tokens begins a query on tokens
func Tokens(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TokensQuery {
	return TokensTable.Query(ctx, exec, mods...)
}

// FindToken retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindToken(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Token, error) {
	if len(cols) == 0 {
		return TokensTable.Query(
			ctx, exec,
			SelectWhere.Tokens.ID.EQ(IDPK),
		).One()
	}

	return TokensTable.Query(
		ctx, exec,
		SelectWhere.Tokens.ID.EQ(IDPK),
		sm.Columns(TokensTable.Columns().Only(cols...)),
	).One()
}

// TokenExists checks the presence of a single record by primary key
func TokenExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return TokensTable.Query(
		ctx, exec,
		SelectWhere.Tokens.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the Token
func (o *Token) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := TokensTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single Token record with an executor
func (o *Token) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return TokensTable.Delete(ctx, exec, o)
}

// Reload refreshes the Token using the executor
func (o *Token) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TokensTable.Query(
		ctx, exec,
		SelectWhere.Tokens.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o TokenSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return TokensTable.DeleteMany(ctx, exec, o...)
}

func (o TokenSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TokenSetter) (int64, error) {
	rowsAff, err := TokensTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o TokenSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uuid.UUID, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Tokens.ID.In(IDPK...),
	)

	o2, err := Tokens(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
